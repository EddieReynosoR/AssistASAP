// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

enum UserType {
  CLIENT
  MECHANIC
}
// Tabla Profile, que guardara los datos de los usuarios autenticados con Clerk
model Profile{
  id     String @id @default(uuid())
  userId String @unique
  name   String
  apellidoP String
  apellidoM String
  email String @db.Text
  telephone String
  type UserType @default(CLIENT)
  imageUrl String @db.Text

  // Un mecánico puede tener muchos productos
  products Product[]

  services Service[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabla Product, donde se guardarán los productos que se van a vender
model Product{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  price Decimal @db.Decimal(8,2)
  slug String
  description String
    
  ordenesServicio ProductosEnOrdenes[]
  

  // Quien es el propietario del producto
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Service {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  price Decimal @db.Decimal(8,2)
  slug String
  description String


  ordenesServicio ServiciosEnOrdenes[]
    
  

  // Quien es el propietario del producto
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)


  @@index([profileId])
}

enum EstadoOrdenServicio {
  PENDIENTE
  EN_PROGRESO
  COMPLETADO
}

model OrdenServicio {
  id String @id @default(uuid())
  fecha DateTime @default(now())
  estado EstadoOrdenServicio @default(PENDIENTE)
  total Decimal @db.Decimal(10,2)

  servicios ServiciosEnOrdenes[]

  productos ProductosEnOrdenes[]

}


model ServiciosEnOrdenes {
  idAsignacion String @id @default(uuid())
  ordenServicio OrdenServicio @relation(fields: [ordenServicioID], references: [id])
  ordenServicioID String
  servicio Service @relation(fields:[servicioID], references: [id])
  servicioID String
  assignedAt DateTime @default(now())

  @@index([ordenServicioID])
  @@index([servicioID])
}

model ProductosEnOrdenes {
  idAsignacion String @id @default(uuid())
  ordenServicio OrdenServicio @relation(fields: [ordenServicioID], references: [id])
  ordenServicioID String
  producto Product @relation(fields:[productoID], references: [id])
  productoID String
  assignedAt DateTime @default(now())

  @@index([ordenServicioID])
  @@index([productoID])
}