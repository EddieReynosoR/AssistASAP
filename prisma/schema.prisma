// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}


// Tabla Profile, que guardara los datos de los usuarios autenticados con Clerk
model Profile{
  id     String @id @default(uuid())
  userId String @unique
  name   String
  apellidoP String
  apellidoM String
  email String @db.Text
  telephone String
  imageUrl String @db.Text

  // Un perfil puede ser de un mecánico, o de un cliente, o ninguno
  mechanic Mechanic?
  client Client?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id String @id @default(uuid())

  // Un cliente, forzosamente tiene un perfil
  profileId String @unique
  profile Profile @relation(fields:[profileId], references: [id])
}

model Mechanic {
  id     String @id @default(uuid())

  // Un mecanico, forzosamente tiene un perfil
  profileId String @unique
  profile Profile @relation(fields:[profileId], references: [id])

  // Un mecánico puede tener muchos productos
  products Product[]

  services Service[]
}

// Tabla Product, donde se guardarán los productos que se van a vender
model Product{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  price Decimal @db.Decimal(8,2)
  slug String
  description String
    
  // Un producto, puede estar en muchas ordenes de servicio
  ordenesServicio ProductosEnOrdenes[]
  

  // Quien es el propietario del producto
  mechanicId String @default("TEST")
  mechanic Mechanic @relation(fields: [mechanicId], references: [id], onDelete: Cascade)

  @@index([mechanicId])
}

model Service {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  price Decimal @db.Decimal(8,2)
  slug String
  description String

  // Un servicio, puede estar en muchas ordenes de servicio
  ordenesServicio ServiciosEnOrdenes[]
    
  

  // Quien es el propietario del producto
  mechanicId String
  mechanic Mechanic @relation(fields: [mechanicId], references: [id], onDelete: Cascade)


  @@index([mechanicId])
}

enum EstadoOrdenServicio {
  PENDIENTE
  EN_PROGRESO
  COMPLETADO
}

// Tabla de las ordenes de servicio
model OrdenServicio {
  id String @id @default(uuid())
  fecha DateTime @default(now())
  estado EstadoOrdenServicio @default(PENDIENTE)
  total Decimal @db.Decimal(10,2)

  // Ver que servicios están asociados a esta orden de servicio
  servicios ServiciosEnOrdenes[]

  // Ver que productos están asociados a esta orden de servicio
  productos ProductosEnOrdenes[]

}

// Tabla que sirve para indicar que muchos servicios están en muchas ordenes de servicio
model ServiciosEnOrdenes {
  idAsignacion String @id @default(uuid())

  // ID de la orden de servicio al que se asocia
  ordenServicio OrdenServicio @relation(fields: [ordenServicioID], references: [id])
  ordenServicioID String

  // ID del servicio al que se asocia
  servicio Service @relation(fields:[servicioID], references: [id])
  servicioID String

  assignedAt DateTime @default(now())


  @@index([ordenServicioID])
  @@index([servicioID])
}

// Muchos productos pueden estar en muchas ordenes de servicio
model ProductosEnOrdenes {
  idAsignacion String @id @default(uuid())

  // ID de la orden de servicio al que se asocia
  ordenServicio OrdenServicio @relation(fields: [ordenServicioID], references: [id])
  ordenServicioID String

  // ID del producto al que se asocia
  producto Product @relation(fields:[productoID], references: [id])
  productoID String

  assignedAt DateTime @default(now())

  cantidad Int

  @@index([ordenServicioID])
  @@index([productoID])
}