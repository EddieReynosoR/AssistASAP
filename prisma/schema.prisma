// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}


// Tabla Profile, que guardara los datos de los usuarios autenticados con Clerk
model Profile{
  id     String @id @default(uuid())
  userId String @unique
  name   String
  apellidoP String
  apellidoM String
  email String @db.Text
  telephone String
  imageUrl String @db.Text

  // Un perfil puede ser de un mecánico, o de un cliente, o ninguno
  mechanic Mechanic?
  client Client?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id String @id @default(uuid())

  // Un cliente puede pedir varias ordenes de servicio
  ordenesDeServicio OrdenServicio[]

  // Un cliente, forzosamente tiene un perfil
  profileId String @unique
  profile Profile @relation(fields:[profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Mechanic {
  id     String @id @default(uuid())

  // Un mecanico, forzosamente tiene un perfil
  profileId String @unique
  profile Profile @relation(fields:[profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Un mecánico puede tener muchos productos y servicios
  products Product[]
  services Service[]

  // Un mecánico puede estar o tener, muchos establecimientos
  establecimientos Establecimiento[]

  // Un mecánico puede atender muchas ordenes de servicio
  ordenesServicio OrdenServicio[]
}

// Tabla Product, donde se guardarán los productos que se van a vender
model Product{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  price Decimal @db.Decimal(8,2)
  slug String
  description String
    
  // Un producto, puede estar en muchas ordenes de servicio
  ordenesServicio ProductosEnOrdenes[] @relation(name: "Ordenes")
  

  // Quien es el propietario del producto
  mechanicId String
  mechanic Mechanic @relation(fields: [mechanicId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([mechanicId])
}

enum TipoServicio {
  DOMICILIO
  ESTABLECIMIENTO
  AMBOS
}

model Service {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  price Decimal @db.Decimal(8,2)
  slug String
  description String
  tipo TipoServicio // Un servicio puede entregarse solo a domicilio, solo en un establecimiento o ambos

  // Un servicio, puede estar en muchas ordenes de servicio
  ordenesServicio ServiciosEnOrdenes[] @relation(name: "Ordenes")
    
  

  // Quien es el propietario del servicio
  mechanicId String
  mechanic Mechanic @relation(fields: [mechanicId], references: [id], onDelete: Cascade, onUpdate: Cascade)


  @@index([mechanicId])
}

enum EstadoOrdenServicio {
  PENDIENTE
  EN_PROGRESO
  COMPLETADO
}

enum TipoOrdenServicio {
  DOMICILIO
  ESTABLECIMIENTO
}

// Tabla de las ordenes de servicio

// Las ubicaciones de los dos individuos que interactúan en la orden, se manejan solo en el front, dependiendo del tipo que tiene el servicio en la base de datos
// Si la orden es a domicilio, en el front checará la ubicación del mecánico y la enrutará a la ubicación del cliente
// Si la orden es para recoger o atender en un establecimiento, se marca la ruta entre la ubicación del cliente y el establecimiento seleccionado
model OrdenServicio {
  id String @id @default(uuid())
  fecha DateTime @default(now())
  estado EstadoOrdenServicio @default(PENDIENTE)
  tipo TipoOrdenServicio
  total Decimal @db.Decimal(10,2) @default(0.0)

  // Ver que servicios están asociados a esta orden de servicio
  servicios ServiciosEnOrdenes[] @relation(name: "Servicios")

  // Ver que productos están asociados a esta orden de servicio
  productos ProductosEnOrdenes[] @relation(name: "Productos")


  // Una orden de servicio, fue creada forzosamente por un cliente
  clienteID String
  cliente Client @relation(fields: [clienteID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Una orden de servicio, puede ser atentida por un mecánico
  mecanicoID String?
  mecanico Mechanic? @relation(fields: [mecanicoID], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Una orden de servicio, puede estar relacionada aun establecimiento
  establecimientoID String?
  establecimiento Establecimiento? @relation(fields: [establecimientoID], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([clienteID])
  @@index([mecanicoID])
  @@index([establecimientoID])
}

// Tabla que sirve para indicar que muchos servicios están en muchas ordenes de servicio
model ServiciosEnOrdenes {
  // ID de la orden de servicio al que se asocia
  // Si se elimina la orden de servicio a la que esta asociada, se elimina esta asignacion
  ordenServicio OrdenServicio @relation(fields: [ordenServicioID], references: [id], onDelete: Cascade, onUpdate:Cascade, name:"Servicios")
  ordenServicioID String

  // ID del servicio al que se asocia
  servicio Service @relation(fields:[servicioID], references: [id], onDelete: Cascade, onUpdate:Cascade, name: "Ordenes")
  servicioID String

  assignedAt DateTime @default(now())


  @@id(name:"IDAsignacion", [ordenServicioID, servicioID])
  @@index([servicioID])
  @@index([ordenServicioID])
}

// Muchos productos pueden estar en muchas ordenes de servicio
model ProductosEnOrdenes {
  // ID de la orden de servicio al que se asocia
  // Si se elimina la orden de servicio a la que esta asociada, se elimina esta asignacion
  ordenServicio OrdenServicio @relation(fields: [ordenServicioID], references: [id], onDelete: Cascade, onUpdate:Cascade, name:"Productos")
  ordenServicioID String

  // ID del producto al que se asocia
  producto Product @relation(fields:[productoID], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "Ordenes")
  productoID String

  assignedAt DateTime @default(now())

  cantidad Int

  @@id(name: "IDAsignacion", [ordenServicioID, productoID])
  @@index([productoID])
  @@index([ordenServicioID])
}

// Tabla de establecimientos
model Establecimiento {
  id String @id @default(uuid())
  nombre String
  latitude String
  longitude String

  // Un establecimiento pertenece a un mecánico
  mecanicoID String
  mecanico Mechanic @relation(fields: [mecanicoID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ordenes OrdenServicio[]

  @@index([mecanicoID])
}